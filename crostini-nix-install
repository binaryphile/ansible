#!/usr/bin/env bash

[[ -e task.bash ]]
case $? in
  0 ) source task.bash;;
  * )
    taskBash=$(curl -s https://raw.githubusercontent.com/binaryphile/ansible/main/task.bash) || exit
    eval "$taskBash"
    unset -v taskBash
    ;;
esac

main() {
  system
  dotfiles
  nix
}

system() {
  section system

  task 'apt update and upgrade'
  definition() {
    sudo apt update -qq && sudo apt upgrade -y
  }
  run

  task 'turn off motd'
  definition() {
    echo 5 >$HOME/.local/share/cros-motd
  }
  ok '[[ $(<$HOME/.local/share/cros-motd) == 5 ]]'
  run

  task 'create required directories'
  definition() {
    local dirs=(
      .config/liquidprompt
      .config/nixpkgs
      .config/ranger
      .local/share/nvim/site/autoload
    )
    for dir in ${dirs[*]}; do
      mkdir -pm 755 $HOME/$dir
    done
  }
  run

  task 'set up ssh directory' mkdir -m 700 $HOME/.ssh
  ok '[[ -d $HOME/.ssh ]]'
  run
}

dotfiles() {
  section dotfiles

  task 'clone dotfiles repository' git clone https://github.com/binaryphile/dotfiles.git $HOME/dotfiles
  ok '[[ -e $HOME/dotfiles ]]'
  run

  task 'link context file' ln -s contexts/work/crostini-bullseye $HOME/dotfiles/context
  ok '[[ -e $HOME/dotfiles/context ]]'
  run

  task 'create dotfile symlinks'
  definition() {
    local links=(
      '[src]=bash/init.bash               [path]=.profile'
      '[src]=bash/init.bash               [path]=.bash_profile'
      '[src]=bash/init.bash               [path]=.bashrc'
      '[src]=gitconfig                    [path]=.gitconfig'
      '[src]=liquidprompt/liquid.theme    [path]=.config/liquidprompt/liquid.theme'
      '[src]=liquidprompt/liquidpromptrc  [path]=.config/liquidpromptrc'
      '[src]=ssh/config                   [path]=.ssh/config'
      '[src]=tmux.conf                    [path]=.tmux.conf'
      '[src]=ranger/rc.conf               [path]=.config/ranger/rc.conf'
    )

    local link
    for l in ${links[*]}; do
      local -A link="( $l )" # expand value to associative array
      ln -sf $HOME/dotfiles/${link[src]} $HOME/${link[path]}
    done
  }
  run
}

nix() {
  section nix

  task 'install nix'
  definition() {
    curl -sSf -L https://install.lix.systems/lix | sh -s -- install --no-confirm
    PATH+=:/nix/var/nix/profiles/default/bin
  }
  ok '[[ -e /nix/var/nix/profiles/default/bin/nix-env ]]'
  run

  task 'add home manager channel' nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager
  ok '[[ -e $HOME/.nix-channels ]]'
  run

  task 'update nix channels' nix-channel --update
  ok '[[ -e $HOME/.nix-defexpr/channels/home-manager ]]'
  run

  task 'install home manager' nix-shell '<home-manager>' -A install
  ok '[[ -e $HOME/.config/home-manager ]]'
  run

  task 'create nix configuration symlinks'
  definition() {
    local links=(
      '[src]=home.nix    [path]=home-manager/home.nix'
      '[src]=config.nix  [path]=nixpkgs/config.nix'
    )

    local link
    for l in ${links[*]}; do
      local -A link="( $l )" # expand value to associative array
      ln -sf $HOME/dotfiles/${link[src]} $HOME/.config/${link[path]}
    done
  }
  run

  task 'apply home manager configuration'
  definition() {
    source $HOME/.nix-profile/etc/profile.d/hm-session-vars.sh
    home-manager switch
  }
  run
}

return 2>/dev/null
set -eu

[[ ${1:-} == --trace ]] && { shift; set -x; }

main
summarize
